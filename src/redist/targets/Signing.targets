<Project>
  <ItemGroup>
     <PackageReference Include="Microsoft.DotNet.SignTool" Version="$(MicrosoftDotNetSignToolVersion)" PrivateAssets="All"  />
  </ItemGroup>

  <Target Name="SetSignProps"
          Condition="'$(SignCoreSdk)' == 'true'">

    <MakeDir Directories="$(ArtifactsTmpDir)" Condition="!Exists('$(ArtifactsTmpDir)')" />
    
    <PropertyGroup>
      <ExternalCertificateId Condition="'$(ExternalCertificateId)' == ''">3PartySHA2</ExternalCertificateId>
      <InternalCertificateId Condition="'$(InternalCertificateId)' == ''">Microsoft400</InternalCertificateId>
      <NugetCertificateId Condition="'$(NugetCertificateId)' == ''">NuGet</NugetCertificateId>
    </PropertyGroup>


    <!-- Logic copied from https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Sign.proj -->

    <ItemGroup>
      <!--
      This is intended to hold information about the certificates used for signing.
      For now the only information required is whether or not the certificate can be
      used for signing already signed files - DualSigningAllowed==true.
    -->
      <CertificatesSignInfo Include="3PartyDual" DualSigningAllowed="true" />
      <CertificatesSignInfo Include="3PartySHA2" DualSigningAllowed="true" />

      <!-- List of container files that will be opened and checked for files that need to be signed. -->
      <!--<ItemsToSign Include="$(ArtifactsPackagesDir)**\*.nupkg" />
      <ItemsToSign Include="$(VisualStudioSetupOutputPath)**\*.vsix" />-->

      <!--
      Map of file extensions to default certificate name. Files with these extensions are
      signed with the specified certificate. Particularly useful for files that don't have
      a public key token.
      The certificate can be overriden using the StrongNameSignInfo or the FileSignInfo item group.
    -->
      <FileExtensionSignInfo Include=".jar" CertificateName="MicrosoftJAR" />
      <FileExtensionSignInfo Include=".js;.ps1;.psd1;.psm1;.psc1;.py" CertificateName="Microsoft400" />
      <FileExtensionSignInfo Include=".dll;.exe" CertificateName="Microsoft400" />
      <FileExtensionSignInfo Include=".nupkg" CertificateName="NuGet" />
      <FileExtensionSignInfo Include=".vsix" CertificateName="VsixSHA2" />
      <FileExtensionSignInfo Include=".zip" CertificateName="None" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Control whether an empty ItemsToSign item group is allowed when calling SignToolTask. -->
      <AllowEmptySignList>false</AllowEmptySignList>
    </PropertyGroup>

    <!-- Allow repository to customize signing configuration -->
    <!--<Import Project="$(RepositoryEngineeringDir)Signing.props" Condition="Exists('$(RepositoryEngineeringDir)Signing.props')" />-->

    <!-- Logic copied from https://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Sign.proj -->
    <Error Text="The value of DotNetSignType is invalid: '$(DotNetSignType)'"
       Condition="'$(DotNetSignType)' != 'real' and '$(DotNetSignType)' != 'test' and '$(DotNetSignType)' != ''" />

    <PropertyGroup>
      <_DryRun>true</_DryRun>
      <_DryRun Condition="'$(OfficialBuild)' == 'true'">false</_DryRun>

      <_TestSign>false</_TestSign>
      <_TestSign Condition="'$(DotNetSignType)' == 'test'">true</_TestSign>

      <_DesktopMSBuildRequired>false</_DesktopMSBuildRequired>
      <_DesktopMSBuildRequired Condition="'$(_DryRun)' != 'true' and '$(MSBuildRuntimeType)' == 'Core'">true</_DesktopMSBuildRequired>
    </PropertyGroup>

    <!-- We only need this if we are going to use the executable version. -->
    <Exec Command='"$(NuGetPackageRoot)vswhere\$(VSWhereVersion)\tools\vswhere.exe" -latest -prerelease -property installationPath -requires Microsoft.Component.MSBuild'
          ConsoleToMsBuild="true"
          StandardErrorImportance="high"
          Condition="$(_DesktopMSBuildRequired)">
      <Output TaskParameter="ConsoleOutput" PropertyName="_VSInstallDir" />
    </Exec>

    <PropertyGroup>
      <_DesktopMSBuildPath Condition="$(_DesktopMSBuildRequired)">$(_VSInstallDir)\MSBuild\15.0\Bin\msbuild.exe</_DesktopMSBuildPath>
    </PropertyGroup>
  </Target>
  
  <Target Name="SignLayout"
          Condition="'$(SignCoreSdk)' == 'true'"
          DependsOnTargets="SetSignProps">

    <ItemGroup>
      <!-- External files -->
      <LayoutFilesToSign Include="$(SdkOutputDirectory)**/Newtonsoft.Json.dll">
        <CertificateName>$(ExternalCertificateId)</CertificateName>
      </LayoutFilesToSign>
      <!-- Built binaries -->
      <LayoutFilesToSign Include="$(SdkOutputDirectory)**/csc.exe;
                            $(SdkOutputDirectory)**/csc.dll;
                            $(SdkOutputDirectory)**/VBCSCompiler.dll;
                            $(SdkOutputDirectory)**/vbc.exe;
                            $(SdkOutputDirectory)**/vbc.dll;
                            $(SdkOutputDirectory)**/fsc.exe;
                            $(SdkOutputDirectory)**/fsi.exe;
                            $(SdkOutputDirectory)**/FSharp.*.dll;
                            $(SdkOutputDirectory)**/dotnet.dll;
                            $(SdkOutputDirectory)**/dotnet.resources.dll;
                            $(SdkOutputDirectory)**/System.*.dll;
                            $(SdkOutputDirectory)**/Microsoft.*.dll;
                            $(SdkOutputDirectory)**/NuGet*.dll;
                            $(SdkOutputDirectory)**/datacollector.dll;
                            $(SdkOutputDirectory)**/datacollector.exe;
                            $(SdkOutputDirectory)**/MSBuild.dll;
                            $(SdkOutputDirectory)**/MSBuild.resources.dll;
                            $(SdkOutputDirectory)**/testhost.dll;
                            $(SdkOutputDirectory)**/testhost.exe;
                            $(SdkOutputDirectory)**/testhost.x86.exe;
                            $(SdkOutputDirectory)**/vstest.console.dll;
                            $(SdkOutputDirectory)**/vstest.console.resources.dll">
        <CertificateName>$(InternalCertificateId)</CertificateName>
      </LayoutFilesToSign>

      
      <LayoutFileSignInfo Include="@(LayoutFilesToSign->'%(Filename)%(Extension)')">
        <CertificateName>%(CertificateName)</CertificateName>
      </LayoutFileSignInfo>
      <DistinctLayoutFileSignInfo Include="@(LayoutFileSignInfo->Distinct())" />
    </ItemGroup>

    <Error Condition="'$(AllowEmptySignList)' != 'true' AND '@(LayoutFilesToSign)' == ''"
           Text="List of files to sign is empty. Make sure that LayoutFilesToSign is configured correctly." />
    
    <Microsoft.DotNet.SignTool.SignToolTask
      DryRun="$(_DryRun)"
      TestSign="$(_TestSign)"
      CertificatesSignInfo="$(CertificatesSignInfo)"
      ItemsToSign="@(LayoutFilesToSign)"
      StrongNameSignInfo="@(StrongNameSignInfo)"
      FileSignInfo="@(DistinctLayoutFileSignInfo)"
      FileExtensionSignInfo="@(FileExtensionSignInfo)"
      TempDir="$(ArtifactsTmpDir)"
      LogDir="$(ArtifactsLogDir)"
      MSBuildPath="$(_DesktopMSBuildPath)"
      SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
      MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>
    
  </Target>

  <Target Name="SignSdkMsi"
        Condition="'$(SignCoreSdk)' == 'true'"
        DependsOnTargets="SetSignProps">

    <ItemGroup>
      <SdkMsiFilesToSign Include="$(SdkMSIInstallerFile)" />

      <SdkMsiFileSignInfo Include="@(SdkMsiFilesToSign->'%(Filename)%(Extension)')">
        <CertificateName>$(InternalCertificateId)</CertificateName>
      </SdkMsiFileSignInfo>
      <DistinctSdkMsiFileSignInfo Include="@(SdkMsiFileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="$(CertificatesSignInfo)"
        ItemsToSign="@(SdkMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(DistinctSdkMsiFileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignTemplatesMsis"
      Condition="'$(SignCoreSdk)' == 'true'"
      DependsOnTargets="SetSignProps">

    <ItemGroup>
      <TemplatesMsiFilesToSign Include="$(Templates50MSIInstallerFile)" />
      <TemplatesMsiFilesToSign Include="$(Templates31MSIInstallerFile)" />
      <TemplatesMsiFilesToSign Include="$(Templates30MSIInstallerFile)" />
      <TemplatesMsiFilesToSign Include="$(Templates21MSIInstallerFile)" />

      <TemplatesMsiFileSignInfo Include="@(TemplatesMsiFilesToSign->'%(Filename)%(Extension)')">
        <CertificateName>$(InternalCertificateId)</CertificateName>
      </TemplatesMsiFileSignInfo>
      <DistinctTemplatesMsiFileSignInfo Include="@(TemplatesMsiFileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="$(CertificatesSignInfo)"
        ItemsToSign="@(TemplatesMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(DistinctTemplatesMsiFileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignSdkBundle"
      Condition="'$(SignCoreSdk)' == 'true'"
      DependsOnTargets="SetSignProps">

    <!-- Extract engine from bundle -->
    <Exec Command="$(WixRoot)/insignia.exe -ib $(CombinedFrameworkSdkHostMSIInstallerFile) -o $(CombinedFrameworkSdkHostBundleEngineName)" />
    
    <!-- Sign engine-->
    <ItemGroup>
      <EngineFileToSign Include="$(CombinedFrameworkSdkHostBundleEngineName)" />
      <EngineFileSignInfo Include="$([System.IO.Path]::GetFileName('$(CombinedFrameworkSdkHostBundleEngineName)'))"
                          CertificateName="$(InternalCertificateId)"/>
    </ItemGroup>
    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="$(CertificatesSignInfo)"
        ItemsToSign="@(EngineFileToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(EngineFileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>
    
    <!-- Reattach engine to bundle -->
    <Exec Command="$(WixRoot)/insignia.exe -ab $(CombinedFrameworkSdkHostBundleEngineName) $(CombinedFrameworkSdkHostMSIInstallerFile) -o $(CombinedFrameworkSdkHostMSIInstallerFile)" />
    
    <!-- Sign bundle -->
    <ItemGroup>
      <BundleFileToSign Include="$(CombinedFrameworkSdkHostMSIInstallerFile)" />
      <BundleFileSignInfo Include="$([System.IO.Path]::GetFileName('$(CombinedFrameworkSdkHostMSIInstallerFile)'))"
                          CertificateName="$(InternalCertificateId)"/>
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="$(CertificatesSignInfo)"
        ItemsToSign="@(BundleFileToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(BundleFileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignSdkPlaceholderMsi"
      Condition="'$(SignCoreSdk)' == 'true'"
      DependsOnTargets="SetSignProps">

    <ItemGroup>
      <SdkPlaceholderMsiFilesToSign Include="$(SdkPlaceholderMSIInstallerFile)" />

      <SdkPlaceholderMsiFileSignInfo Include="@(SdkPlaceholderMsiFilesToSign->'%(Filename)%(Extension)')">
        <CertificateName>$(InternalCertificateId)</CertificateName>
      </SdkPlaceholderMsiFileSignInfo>
      <DistinctSdkPlaceholderMsiFileSignInfo Include="@(SdkPlaceholderMsiFileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="$(CertificatesSignInfo)"
        ItemsToSign="@(SdkPlaceholderMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(DistinctSdkPlaceholderMsiFileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

</Project>
